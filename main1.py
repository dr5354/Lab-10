import asyncio
import json
import random
import re
import requests
import sounddevice as sd
import pyttsx3
import webbrowser
from vosk import Model, KaldiRecognizer
import numpy as np

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—á–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
SAMPLE_RATE = 44100
BLOCK_SIZE = 8000
SPEECH_RATE = 400
MIN_SPEECH_GAP = 1.5
AMPLITUDE_THRESHOLD = 0
MAX_CHARACTER_ID = 826

#–°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ü–∏—Ñ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id
RU_NUMBER_WORDS = {
    "–Ω–æ–ª—å": "0",
    "–æ–¥–∏–Ω": "1", "–æ–¥–Ω–∞": "1",
    "–¥–≤–∞": "2",
    "—Ç—Ä–∏": "3",
    "—á–µ—Ç—ã—Ä–µ": "4",
    "–ø—è—Ç—å": "5",
    "—à–µ—Å—Ç—å": "6",
    "—Å–µ–º—å": "7",
    "–≤–æ—Å–µ–º—å": "8",
    "–¥–µ–≤—è—Ç—å": "9",
}

# –§—Ä–∞–∑—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–æ–≥—É—Ä—á–∏–∫–∞ —Ä–∏–∫–∞) –¥–ª—è –æ–∑–≤—É—á–∫–∏
Answers = {
    "welcome": [
        "–û–≥—É—Ä—á–∏–∫ –†–∏–∫ –Ω–∞ —Å–≤—è–∑–∏! –ù–µ —Ç—Ä–∞—Ç—å –º–æ–µ –≤—Ä–µ–º—è, –≥–æ–≤–æ—Ä–∏ –±—ã—Å—Ç—Ä–æ! –î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–∞–∂–∏ '–ø–µ—Ä—Å–æ–Ω–∞–∂ ID' –∏–ª–∏ '—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂'."
    ],
    "processing": [
        "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –ù–µ –æ—Ç–≤–ª–µ–∫–∞–π –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –û–≥—É—Ä—á–∏–∫–∞!"
    ],
    "success": [
        "–í–æ—Ç —Ç–µ–±–µ: {result}. –ë–ª–∞–≥–æ–¥–∞—Ä–∏ –û–≥—É—Ä—á–∏–∫–∞ –†–∏–∫–∞!"
    ],
    "failure": [
        "–ù–µ —Ç—Ä—ã–Ω–¥–∏ –µ—Ä—É–Ω–¥—É! –°–∫–∞–∂–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏–ª–∏ –≤–∞–ª–∏!"
    ],
    "shutdown": [
        "–û–≥—É—Ä—á–∏–∫ –†–∏–∫ —É—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫–∞—Ç. –ü–æ–∫–∞, –ª—É–∑–µ—Ä—ã!"
    ],
    "no_character_selected": [
        "–≠–π, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±–µ—Ä–∏! –°–∫–∞–∂–∏ '–ø–µ—Ä—Å–æ–Ω–∞–∂ ID' –∏–ª–∏ '—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂', —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, —Å –∫–µ–º –≤–æ–∑–∏—Ç—å—Å—è!",
    ],
    "character_changed_prompt": [
        "–õ–∞–¥–Ω–æ, —ç—Ç–æ–≥–æ –∑–∞–±—ã–ª–∏. –ö–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—É–¥–µ–º –º—É—á–∞—Ç—å? –ì–æ–≤–æ—Ä–∏ ID –∏–ª–∏ '—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂'."
    ],
    "character_selection_success": [
        "–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} –≤—ã–±—Ä–∞–Ω. –ù–µ –∑–∞—Å—Ç–∞–≤–ª—è–π –º–µ–Ω—è –∂–¥–∞—Ç—å."
    ]
}


class PickleRickAssistant:
    def __init__(self, sample_rate):
        try:
            self.model = Model('vosk-model-small-ru-0.22')  # –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            self.recognizer = KaldiRecognizer(self.model, sample_rate) #–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
            self.recognizer.SetMaxAlternatives(0)
            self.recognizer.SetWords(True)
            self.speech_engine = pyttsx3.init() #–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            self.speech_engine.setProperty("rate", SPEECH_RATE)
            self.last_spoken = 0.0
            self.character_data = {}
            self.current_character_id = None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
            raise
    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
    def speak(self, quote_type, result=None):
        try:
            quote = random.choice(Answers[quote_type])
            if result:
                if isinstance(result, dict):
                    quote = quote.format(**result)
                else:
                    quote = quote.format(result=result)
            print(f"ü•í –û–≥—É—Ä—á–∏–∫ –†–∏–∫: {quote}")
            self.speech_engine.say(quote)
            self.speech_engine.runAndWait()
            self.last_spoken = asyncio.get_event_loop().time()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ä–µ—á–∏: {e}")
    #–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def fetch_character_by_id(self, char_id):
        try:
            self.speak("processing")
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                requests.get,
                f"https://rickandmortyapi.com/api/character/{char_id}"
            )
            #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code != 200:
                self.current_character_id = None
                self.character_data = {}
                self.speak("failure", result=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {char_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä, –≥–µ–Ω–∏–π.")
                return

            self.character_data = response.json()
            self.current_character_id = self.character_data["id"]
            self.speak("character_selection_success", result={"name": self.character_data['name']})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID: {e}")
            self.current_character_id = None
            self.character_data = {}
            self.speak("failure")
    #–ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
    async def fetch_random_character(self):
        try:
            self.speak("processing")
            char_id_random = random.randint(1, MAX_CHARACTER_ID)
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                requests.get,
                f"https://rickandmortyapi.com/api/character/{char_id_random}"
            )

            if response.status_code != 200:
                self.current_character_id = None
                self.character_data = {}
                self.speak("failure", result="–ù–µ —Å–º–æ–≥ –≤—ã—Ç–∞—â–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ. API –≥–ª—é—á–∏—Ç, –∏–ª–∏ —è.")
                return

            self.character_data = response.json()
            self.current_character_id = self.character_data["id"]
            self.speak("character_selection_success", result={"name": self.character_data['name']})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            self.current_character_id = None
            self.character_data = {}
            self.speak("failure")
    #–§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def change_character(self):
        self.current_character_id = None
        self.character_data = {}
        self.speak("character_changed_prompt")
    #–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def get_first_episode(self):
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID
        if not self.current_character_id:
            self.speak("no_character_selected")
            return
        try:
            self.speak("processing")
            episode_url = self.character_data["episode"][0]
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, requests.get, episode_url)
            episode_data = response.json()
            self.speak("success", result=episode_data["name"])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞: {e}")
            self.speak("failure")
    #–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def display_image(self):
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID
        if not self.current_character_id:
            self.speak("no_character_selected")
            return
        try:
            self.speak("processing")
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, webbrowser.open, self.character_data["image"])
            self.speak("success", result="–í–æ—Ç —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            self.speak("failure")
    #–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–∞/—Ä–∞—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def get_species(self):
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID
        if not self.current_character_id:
            self.speak("no_character_selected")
            return
        try:
            self.speak("processing")
            species = self.character_data.get("species", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥")
            self.speak("success", result=f"–í–∏–¥ ‚Äî {species}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–∞: {e}")
            self.speak("failure")
    #–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–Ω–¥–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def get_gender(self):
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ–∑–∞–¥–∞–Ω–Ω–æ–≥–æ ID
        if not self.current_character_id:
            self.speak("no_character_selected")
            return
        try:
            self.speak("processing")
            gender = self.character_data.get("gender", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª")
            self.speak("success", result=f"–ü–æ–ª ‚Äî {gender}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–∞: {e}")
            self.speak("failure")
    #–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async def get_current_character_info(self):
        if not self.current_character_id:
            self.speak("no_character_selected")
            return
        if self.character_data and "name" in self.character_data:
            info = (f"–ò–º—è: {self.character_data['name']}, "
                    f"–°—Ç–∞—Ç—É—Å: {self.character_data['status']}, "
                    f"–í–∏–¥: {self.character_data['species']}, "
                    f"–ì–µ–Ω–¥–µ—Ä: {self.character_data['gender']}.")
            self.speak("success",
                       result=f"–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ–º —Å {self.character_data['name']}. –í–æ—Ç —á—Ç–æ —è –æ –Ω–µ–º –∑–Ω–∞—é: {info}")
        else:
            self.speak("failure", result="–Ø —Å–∞–º –Ω–µ –ø–æ–º–Ω—é, —Å –∫–µ–º —è. –í—ã–±–µ—Ä–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –µ—â–µ —Ä–∞–∑!")
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    async def process_command(self, text):
        command = text.lower().strip()
        if not command:
            return True
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {command}")

        #–ë–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID
        match_spoken_digits = re.match(r"(?:–ø–µ—Ä—Å–æ–Ω–∞–∂|–≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞|–≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)\s+(?:–Ω–æ–º–µ—Ä\s+)?(.*)", command)
        if match_spoken_digits:
            words_after_command = match_spoken_digits.group(1).strip()

            if words_after_command:
                potential_digit_words = words_after_command.split()
                id_str_from_words = ""

                for word in potential_digit_words:
                    cleaned_word = word.rstrip(".?!,:;")

                    if cleaned_word in RU_NUMBER_WORDS:
                        id_str_from_words += RU_NUMBER_WORDS[cleaned_word]
                    else:
                        break

                if id_str_from_words:
                    try:
                        char_id = int(id_str_from_words)
                        if 1 <= char_id <= MAX_CHARACTER_ID:
                            await self.fetch_character_by_id(char_id)
                        else:
                            self.speak("failure",
                                       result=f"–°–æ–±—Ä–∞–Ω–Ω—ã–π ID: {char_id} (–∏–∑ —Å–ª–æ–≤ '{words_after_command}') –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ {MAX_CHARACTER_ID}.")
                        return True
                    except ValueError:
                        self.speak("failure",
                                   result=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{id_str_from_words}' –≤ —á–∏—Å–ª–æ –∏–∑ '{words_after_command}'.")
                        return True

        #–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if any(keyword in command for keyword in ["—Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "—Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "–¥–∞–π —Å–ª—É—á–∞–π–Ω–æ–≥–æ"]):
            await self.fetch_random_character()
            return True

        if any(keyword in command for keyword in
               ["—Å–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "—Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "–¥—Ä—É–≥–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ"]):
            await self.change_character()
            return True


        if any(keyword in command for keyword in ["–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø", "–∑–∞–≤–µ—Ä—à–∏—Ç—å"]):  
            self.speak("shutdown")
            return False


        if not self.current_character_id:
            self.speak("no_character_selected")
            return True

        if any(word in command for word in ["—ç–ø–∏–∑–æ–¥", "—Å–µ—Ä–∏—è"]):
            await self.get_first_episode()
        elif any(word in command for word in ["–ø–æ–∫–∞–∂–∏", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞"]):
            await self.display_image()
        elif any(word in command for word in ["–≤–∏–¥", "—Ä–∞—Å–∞", "—Ç–∏–ø"]):
            await self.get_species()
        elif any(word in command for word in ["–≥–µ–Ω–¥–µ—Ä", "–ø–æ–ª"]):
            await self.get_gender()
        elif any(word in command for word in
                 ["–∫—Ç–æ —Ç—ã", "–∫–∞–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "—Ç–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂", "—Å –∫–µ–º —Ä–∞–±–æ—Ç–∞–µ—à—å", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ", "–∏–Ω—Ñ–æ"]):
            await self.get_current_character_info()
        else:
            self.speak("failure")
        return True

#–§—É–Ω–∫—Ü–∏—è –∞—É–¥–∏–æ–∑–∞—Ö–≤–∞—Ç–∞ –≤–≤–æ–¥–∞
async def audio_listener(assistant, device_index, sample_rate):
    try:
        #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∑–∞—Ö–≤–∞—Ç–∞
        print(f"üéôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {sd.query_devices(device_index)['name']}")
        device_info = sd.query_devices(device_index)
        print(f"üéôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_info['default_samplerate']} –ì—Ü")
        print(f"üéôÔ∏è –§–æ—Ä–º–∞—Ç: –º–æ–Ω–æ, 16 –±–∏—Ç, {sample_rate} –ì—Ü")
        with sd.RawInputStream(
                samplerate=sample_rate, #–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                blocksize=BLOCK_SIZE,
                device=device_index,
                dtype="int16",
                channels=1, #–ú–æ–Ω–æ –∫–∞–Ω–∞–ª
        ) as stream:
            print("üéôÔ∏è –°–ª—É—à–∞—é...")
            while True:
                data, overflowed = stream.read(BLOCK_SIZE) #overflowed –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                if overflowed:
                    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∞
                    print("‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ–±—É—Ñ–µ—Ä–∞!")
                    continue
                #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–º–ø–ª–∏—Ç—É–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –≤–≤–æ–¥ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π - —à—É–º)
                amplitude = np.abs(np.frombuffer(data, dtype=np.int16)).mean()
                if amplitude < AMPLITUDE_THRESHOLD:
                    continue

                data_bytes = np.frombuffer(data, dtype=np.int16).tobytes()
                #–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
                if assistant.recognizer.AcceptWaveform(data_bytes):
                    result = json.loads(assistant.recognizer.Result())
                    text = result.get("text", "").strip()
                    if text:
                        print(f"üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
                        if (asyncio.get_event_loop().time() - assistant.last_spoken) >= MIN_SPEECH_GAP:
                            if not await assistant.process_command(text):
                                break
                else:
                    partial_result = json.loads(assistant.recognizer.PartialResult())
                    partial_text = partial_result.get("partial", "").strip()
                    if partial_text:
                        print(f"üîä –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {partial_text}")
                await asyncio.sleep(0.01)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ audio_listener: {e}")
        raise

#–û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –ª–æ–≥–∏–∫–∏ –∫–æ–¥–∞
async def main():
    device_index = 3 #–ò–Ω–¥–µ–∫—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    sample_rate = SAMPLE_RATE

    try:
        device_info = sd.query_devices(device_index)
        if sample_rate != device_info['default_samplerate']:
            print(
                f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ {sample_rate} –ì—Ü –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({device_info['default_samplerate']} –ì—Ü). –ò—Å–ø–æ–ª—å–∑—É–µ–º {sample_rate}.")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device_index}: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.")
        return

    try:
        assistant = PickleRickAssistant(sample_rate)
        assistant.speak("welcome")
        await audio_listener(assistant, device_index, sample_rate)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüö™ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")